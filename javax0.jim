{@comment}
define the 'section', 'subsection' and 'subsubsection' macros that number the individual sections

{@counter:define id=:scount}
{@counter:define id=:sscount}
{@counter:define id=:ssscount}
{@define section($x)=== {scount}. $x{@counter:define id=:sscount}}
{@define subsection($x)==== {scount last}.{sscount}. $x{@counter:define id=:ssscount}}
{@define subsubsection($x)===== {scount last}.{sscount last}.{ssscount}. $x}

{@define BLOG_URL=https://javax0.github.io}

{@define article($fileName,$refText)=link:/{@replace (regex) |$fileName|(\d)-|$1/|}.html[$refText]}
{@define liquid($x)={@escape* `liquid`{`liquid`} $x {@escape* `liquid`}`liquid`}}
{@define raw($x)={liquid raw}$x{liquid endraw}}

------------------------------------------------------------------------------------------------------------------------
When adding a picture to the blog as PNG add it to the MASTER branch and push it to the server using './build'
That way the article can reference the image with a full URL which works in the generated article as well as in the IntelliJ.
Currently there is no known solution where the reference to an image is relative and works in the IDE as well as in the generated article.

{@define png($x,...$Y)=image::https://javax0.github.io/assets/images/$x.png[$Y]}
------------------------------------------------------------------------------------------------------------------------




------------------------------------------------------------------------------------------------------------------------
List the given snippet as Java source code with lines numbered.

{@define java($X)=[source,java]
----
{@snip (actions=number,trim format="%2d. ") $X}
----}
------------------------------------------------------------------------------------------------------------------------


------------------------------------------------------------------------------------------------------------------------

List the output of some code saved to a file including the file verbatim.
The argument to the macro is the name of the file.
The location of the file has to be the project root directory.

{@define sampleOutput($X)=[source,text]
----
{#include [verbatim] ../_projects/{ARTICLE}/$X}
----}
------------------------------------------------------------------------------------------------------------------------

------------------------------------------------------------------------------------------------------------------------

Different disclaimers


{@define articleDisclaimer=
[%collapsible,title=Article Management Technical Details]
====
****
* Code link:https://github.com/javax0/javax0.github.io/tree/master/_projects/{ARTICLE}[https://github.com/javax0/javax0.github.io/tree/master/_projects/{ARTICLE}]
* Article source link:https://github.com/javax0/javax0.github.io/blob/master/_posts/{ARTICLE}.adoc.jam[https://github.com/javax0/javax0.github.io/blob/master/_posts/{ARTICLE}.adoc.jam]
****
====}


{@define codeDisclaimer=
[%collapsible,title=Code Sample Disclaimer]
====
****
The code samples are available on GitHub in the link:https://github.com/javax0/javax0.github.io/tree/master/_projects[project directory].
Each article has a project directory named `YYYY-MM-DD-article-title` where the project code files are.

For this article it is ``{ARTICLE}``.

The samples are automatically copied from the project directory to the article using Jamal.
No manual copy, no outdated stale samples.
****
====}

{@define outputDisclaimer=
[%collapsible,title=Output Disclaimer, sidebar]
====
[sidebar]
The output in the unit tests is redirected calling `System.setOut()`.
The output is collected to a file and then this file is included calling `include [verbatim]` Jamal macro into the article.
====}

{@define commentDisclaimer=
[%collapsible,title="How to Comment", sidebar]
====
****
Use the Disqus commenting possibility to comment.
If you find any incorrectness in the article, you are welcome to mention it.
You can also access the source code of the article on github at

link:https://github.com/javax0/javax0.github.io/blob/master/_posts/{ARTICLE}.adoc.jam[`https://github.com/javax0/javax0.github.io/blob/master/_posts/{ARTICLE}.adoc.jam`]

You are welcome to create a link:https://github.com/javax0/javax0.github.io/issues/new[ticket], create a  link:https://github.com/javax0/javax0.github.io/fork[fork], suggest modification via pull requests.
Note that this repository also contains the demonstration sample source code.

For other aspects of commenting read the link:https://javax0.github.io/about/[ABOUT] page of this blog.
****
====}
------------------------------------------------------------------------------------------------------------------------
